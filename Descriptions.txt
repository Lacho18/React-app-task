Задача 1.
Конкретни грешки не намерих в предоставената навигация, освен това, че в Nav.jsx промених тага на снимката от <a> към <Link>, за да избегна презареждането на страницата.
Също така направих промяна в CompanyNav.jsx. Линк с текст "Създаване на работни места" водеше до началната страница. Сега води към нов route - /new-job.
Добавих 2 параметъра към линка до /jobs, където потребителите могат да разглеждат обяви. Те са с цел предварително да се направи филтриране на обявите. По тази причина
всички линкове във файла JobCategories.jsx са променени, съобразно това, да направят филтрирането още щом се влезе в страницата. По същата причина са променени и линковете във
файла Home.jsx.

Задача 2.
Във файл authApiSlice.jsx добавих допълнителни функции за валидиране на данните, като проверка за това дали имейлът е прекалено кратък, дали паролата е само цифри и други.
Ако данните не са валидни връщат обект от клас Error, като така се изпълнява catch блок, заради ключова дума throw, която генерира изключение.
По тази причина във файл AuthPage.jsx, където се викат функциите за влизане и регистрация са обградени от try блок. Ако се генерира грешка се изпълнява catch блока, 
който задава на състояние за грешки, съобщението на грешката.

Задача 3.
Папката newQuestionnaire съдържа всички файлове, които изпълняват тази задача. Тази папка предоставя компоненти за създаване на въпроси, визуализирането им и възможността да се пратят в базата данни или да бъдат изтрити.
Въпросите са 3 вида (close-ended, multiple choices, open-ended)
При close-ended трябва да се напише номера на верния отговор, като лимит за това колко ще са отговорите няма, но верният трябва да е само 1.
При multiple choices трябва да се маркират номерата на всички верни отговори.
При open-ended трябва да се напишат ключови думи, които се очаква да присъстват в отговора на потребителя, като се и задава брой на ключовите думи, които трябва да присъстват в отговора, за да може да бъде зачетен за верен.
Когато въпросът е създаден и са попълнени всички полета, се добавя към масив от въпроси, след което той може да се разгледа или изстрие.
След създаване на въпроси, те се пращат към базата данни. Единственото ограничение е да има поне 1 въпрос.
За добавянето на въпросника съм добавил към API във файл authApiSlice.jsx нова мутация на име postQuestionnaire. Това е POST заявка, пращаща масива от въпроси към сървъра на 
route http://localhost:3000/api/auth/questionnaire.
Файлове:
NewQuestionnaire.jsx - основния компонент на странициата, визуализира бутони за създаване на въпрос и submit на създадените въпроси.
NewQuestion.jsx - компонент визуализиращ бутони, позволяващи на потребителя да избере видът на въпроса. Бутаните променят състояние декларирано в компонента, според което се визуализира желаната структура за въпроса.
CloseEnded.jsx - form за създаване или на close-ended въпрос или на multiple choices. Този компонент може да визуализира структура и за двата вида въпроси, като при multiple choices
визуализира масив от отговори и потребителя трябва да цъкне на верните, за да ги селектира.
OpenEnded.jsx - form за създаване на open-ended въпрос.
QuestionStructure - визуализиране на вече създаден въпрос. Как би изглиждал от гледната точка на кандидатсващия.

Задача 4.
Папката newJobFiles съдържа всички файлове изпълняващи тази задача. Папката предоставя компоненти визуализиращи форма за създаване на обява за работа.
Тези компоненти се достъпват в защитен route, като само компании могат да го достъпват след като влязат в своите профили. След публикуването на обявите се добавя тяхното име към обявата.
Основният компонент е кодът във файл NewJob.jsx. Файлът се състои от следните състояния:
1. categoryIndex - Очаква се да има масив, в който да бъдат описани абсолютно всички категории за обявата, като например IT, Marketing и други, като в този масив има и масив от
всички видове работа, които могат да се припишат към тази категория (при IT - Backend, Frontend, Fullstack и тн.). Това състояние следи потребителя каква категория е селектирал и 
съответно сочи към позицията и в масива. В зависимост и от този индекс се визуализират различни опции за селектиране на вида на работата.
2. jobKindsIndex - Очаква се да има масив, в който има обекти състоящи се от поле описващо видът на технологиите, като например Backend и масив от такива технологии. Примерен такъв масив е във файл jobKinds.js. Cлед селектиране
на вид технологии от създаващия обявата, този index сочи позицията на технологиите в масива, които се визуализират в отделен компонент.
3. toggleWindow - Състояние следящо дали компонентът TechnologiesWindow.jsx ще се визуализира. Този компонент показва всички технологии от селектирания вид, като предоставя възможност на потребителя да ги 
селектира с кликане на мишката.
4. error - Състояние служещо за визуализиране на съобщения за грешки, постъпили по време на ползване на web приложението.  
5. newJob - Състояние описващо обекта за новата обява. Този обект се попълва чрез селектиране на избираемите полета и попълване на другите. Обектът може да се изпрати към сървъра само ако всичко е попълнено.
useEffect е react hook описващ функция, която се изпълна веднага след зареждане на компонента, както и след промяна на променлива подадена в dependencies array. Самият useEffect
връща като резултат функция, която се изпълнява веднага, след като се премахне компонентът от визуализираните компоненти. В случая се добавя евент beforeunload, който се изпълнява,
когато се напусне компонентът, показващ съобщение затова, че се напуска страницата и ако има промени да се запазят. При напускане на компонента, този евент се премахва.
Въпросниците са задължителна част от обявата. В компонента са предоставени 2 линка. Единият пренасочва към страница, на която се намират всички въпросници на компанията, а другият насочва
към страницата за създаване на въпросник. В обектът за обявата се добавя id на самия въпросник в базата данни.
Към authApiSlice.jsx е добавена още една мутация postNewJobApplication. Това е POST request към API, като се праща обектът newJob и се праща към http://localhost:3000/api/auth/job

Задача 5.
Всички филтри са направени във файла Jobs.jsx. Това е файл достъпен само от профили с роля employee. Филтрите се записват в обект състояние filters и се прилагат при изпълнение на 
функция applyFilters(). Тази функция филтрира масива от обяви по зададените филтри.
Към тази страница има параметри от url, categoryParam и techParam. Тези параметри са с цел, да се приложат филтри директно с влизането в страницата. Какви ще са филтрите зависи
от това от къде потребителят е достъпил страницата. Като пример ако е цъкнал на обяви Backend директно се прилага филтър за такива обяви. Ако има параметри в url се извиква
функцията за филтриране от useEffect.
При натискане на бутон clear filters се премахват всички филтри, като се визуализират всички обяви.
С цел, след като се премахнат всички филтри, визуално да се отстранят отметките от input полетата, за всеки атрибут checked се проверява дали в самите филтри присъства id на checkbox.